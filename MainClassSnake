
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;

public class Main extends KeyAdapter {
	
	private static int Width = 260;
	
	private static int Height = 300;
	
	private static int CellSize = 10;
	
	private Canvas canvas;
	
	private Snake snake;
	
	private boolean gameContinue = true;
	
	public Main(Canvas canvas) {
		this.canvas = canvas;
		snake = new Snake(Width, Height, CellSize);
		canvas.addKeyListener(this);
	}

	public static void main(String[] args) {
		
		JFrame frame = new JFrame("Snake Game - TEAM DORVAL");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		
		/*JButton btn = new JButton("Start");     Това е страничен бутон, който може да бъде за старт и пауза
		frame.add(btn);
		frame.setLayout(new FlowLayout());*/
		
		Canvas canvas = new Canvas();	
		canvas.setBackground(Color.BLACK);
		canvas.setPreferredSize(new Dimension(Width, Height));

		frame.add(canvas);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
		Main snakeGame = new Main(canvas);
		snakeGame.startGame();			
	}
	

	public void startGame() {
		
		//Sound music = new Sound();
		//music.start();
		
		canvas.createBufferStrategy(2);

		Graphics2D g = (Graphics2D)canvas.getBufferStrategy().getDrawGraphics();

		long start = 0L;
		long sleepDuration = 0L;

		while(true) {
			start = System.currentTimeMillis();
			update();
			render(g);		//
			canvas.getBufferStrategy().show();		
			g.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
			sleepDuration = (1000L / Snake.levelSpeed) - (System.currentTimeMillis() - start);
			
			if(sleepDuration > 0) {	
				try {
					Thread.sleep(sleepDuration);
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void update() {
		if (gameContinue) {
			gameContinue = this.snake.updateSnake(CellSize);
		}
	}

	private void render(Graphics2D g) {
		if (gameContinue) {			
			g.setColor(Color.YELLOW);
			if (this.snake.getBonus() != null) {
				g.fillRect(this.snake.getBonus().getPosition().getX(), 
						this.snake.getBonus().getPosition().getY(), CellSize/2, CellSize/2);
			}
			
			g.setColor(Color.RED);
			if (this.snake.getLive() != null) {
				g.fillOval(this.snake.getLive().getPosition().getX(), 
						this.snake.getLive().getPosition().getY(), CellSize/2, CellSize/2);
			}
		
			g.setColor(Color.BLUE);
			for (Point point : this.snake.getSnakePosition()) {
				g.fillOval(point.getX(), point.getY(), CellSize, CellSize);
			}
			
			// draw gameinfo menu
			g.setColor(Color.GRAY);	
			g.drawString("_________________________________________", 0, 280);
			g.drawString("LIVES:" + Snake.lives, 5, 295);
			g.drawString("SCORES:" + Snake.scores, 100, 295);
			g.drawString("LEVEL:" + Snake.levels, 200, 295);
		
		} else {
				g.setColor(Color.RED);
				g.drawString("GAME OVER!!!", Width/2 -40, Height/3);
				
				g.setColor(Color.GREEN);
				g.drawString("SCORES:" + Snake.savedScores, Width/2 -30, Height/3+25);
				
				g.setColor(Color.DARK_GRAY);			
				g.drawString("PRESS ENTER TO START NEW GAME", 20, Height/2);
				
				g.setColor(Color.WHITE);			
				g.drawString("_________________________________________", 0, Height/2+10);
				g.setColor(Color.WHITE);			
				g.drawString("HIGH SCORES", 80, Height/2+25);
				g.setColor(Color.WHITE);			
				g.drawString("1st :" + Snake.highScores1, 110, Height/2+45);
				g.setColor(Color.WHITE);			
				g.drawString("2nd:" + Snake.highScores2, 110, Height/2+60);
				g.setColor(Color.WHITE);			
				g.drawString("3th :" + Snake.highScores3, 110, Height/2+75);
				
				//зануляваме точките нивото при край на играта. 
				Snake.scores = 0;		
				Snake.levels = 1;
				Snake.lives = 3;
				Snake.levelSpeed = 6;
				this.snake.resetSnake();
		}	
	}
	
	@Override
	public void keyPressed(KeyEvent e) {
		
		if(e.getKeyCode() == KeyEvent.VK_UP) {
			this.snake.setDirection(Direction.Up);
		}
		if(e.getKeyCode() == KeyEvent.VK_S || e.getKeyCode() == KeyEvent.VK_DOWN) {
			this.snake.setDirection(Direction.Down);
		}
		if(e.getKeyCode() == KeyEvent.VK_A  || e.getKeyCode() == KeyEvent.VK_LEFT) {
			this.snake.setDirection(Direction.Left);
		}
		if(e.getKeyCode() == KeyEvent.VK_D  || e.getKeyCode() == KeyEvent.VK_RIGHT) {
			this.snake.setDirection(Direction.Right);
		}
		if(e.getKeyCode() == KeyEvent.VK_ENTER) {
			if (!gameContinue) {
				this.snake.resetSnake();
				gameContinue = true;
			}
		}
	}

}
	

	




